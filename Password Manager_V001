"""
"Welcome to the Password Manager!"
1. Enter the user name and password, and then click the \ "Save Password \" button to add a password.
2. Select an item in the password list, and then click the \ "Delete Record \" button to delete the selected password.
3. Select an item in the password list, and then click the \ "Modify Record \" button to modify the selected password.
4. All operations will update the password list in real time.
5. Please ensure that the key file \"key.key\ "has been generated before use.
6. If not, please click the \ "Save Password \" button to generate it.
7. Click the \ "Switch Password Display \" button to switch the display mode of the password input box.
"Enjoy your use!"
"""

import tkinter as tk
from tkinter import messagebox
from cryptography.fernet import Fernet
import os
import json

def generate_key():
    return Fernet.generate_key()

def save_key_to_file(key):
    with open("key.key", "wb") as key_file:
        key_file.write(key)

def load_key():
    with open("key.key", "rb") as key_file:
        return key_file.read()

def save_password(username, password):
    try:
        with open('encrypted_passwords.json', 'rb') as file:
            encrypted_data = file.read()
            decrypted_data = cipher_suite.decrypt(encrypted_data).decode()
            password_entry = f"\nUsername: {username} - Password: {password}"
            decrypted_data += password_entry
            encrypted_data = cipher_suite.encrypt(decrypted_data.encode())
            with open('encrypted_passwords.json', 'wb') as file:
                file.write(encrypted_data)
    except FileNotFoundError:
        encrypted_data = cipher_suite.encrypt(json.dumps([{"Username": username, "Password": password}]).encode())
        with open('encrypted_passwords.json', 'wb') as file:
            file.write(encrypted_data)
    messagebox.showinfo("成功", "密码已保存！")

def load_passwords():
    try:
        with open('encrypted_passwords.json', 'rb') as file:
            encrypted_data = file.read()
            decrypted_data = cipher_suite.decrypt(encrypted_data).decode()
            return decrypted_data
    except FileNotFoundError:
        return "No passwords saved yet."

def clear_entries():
    username_entry.delete(0, tk.END)
    password_entry.delete(0, tk.END)

def update_password():
    username = username_entry.get()
    password = password_entry.get()
    if username and password:
        save_password(username, password)
        passwords_text.delete(1.0, tk.END)
        passwords_text.insert(tk.END, load_passwords())
        clear_entries()
    else:
        messagebox.showerror("错误", "用户名和密码不能为空！")

def delete_selected():
    selected_text = passwords_text.tag_ranges(tk.SEL)
    if selected_text:
        start, end = selected_text
        passwords_text.delete(start, end)
        # 更新密码文件，删除选定的记录
        with open('encrypted_passwords.json', 'wb') as file:
            file.write(cipher_suite.encrypt(passwords_text.get(1.0, tk.END).encode()))
        messagebox.showinfo("成功", "选定的记录已删除！")
    else:
        messagebox.showerror("错误", "请选择要删除的记录！")

def modify_selected():
    selected_text = passwords_text.tag_ranges(tk.SEL)
    if selected_text:
        start, end = selected_text
        selected_record = passwords_text.get(start, end)
        # 将选定的记录放入输入框，以便用户修改
        clear_entries()
        username, password = selected_record.split('-')
        username_entry.insert(0, username.strip())
        password_entry.insert(0, password.strip())
        # 删除选定的记录
        passwords_text.delete(start, end)
        # 更新密码文件，删除选定的记录
        with open('encrypted_passwords.json', 'wb') as file:
            file.write(cipher_suite.encrypt(passwords_text.get(1.0, tk.END).encode()))
        messagebox.showinfo("成功", "选定的记录已修改！")
    else:
        messagebox.showerror("错误", "请选择要修改的记录！")

def toggle_password_visibility():
    current_state = password_entry.cget("show")
    if current_state == "*":
        password_entry.config(show="")
    else:
        password_entry.config(show="*")

def show_help():
    help_text = "欢迎使用密码管理器！\n\n"\
                "1. 输入用户名和密码，然后点击\"保存密码\"按钮来添加密码。\n"\
                "2. 在密码列表中选择一项，然后点击\"删除记录\"按钮来删除选定的密码。\n"\
                "3. 在密码列表中选择一项，然后点击\"修改记录\"按钮来修改选定的密码。\n"\
                "4. 所有的操作都会实时更新密码列表。\n"\
                "5. 请确保在使用之前已经生成了密钥文件 \"key.key\"。\n"\
                "6. 如果没有，请点击\"保存密码\"按钮来生成。\n"\
                "7. 点击\"切换密码显示\"按钮来切换密码输入框的显示模式。\n\n"\
                "祝您使用愉快！"
    messagebox.showinfo("帮助", help_text)

if not os.path.exists("key.key"):
    key = generate_key()
    save_key_to_file(key)
else:
    key = load_key()

cipher_suite = Fernet(key)

root = tk.Tk()
root.title("密码管理器")

passwords_text = tk.Text(root, height=10, width=40)
passwords_text.insert(tk.END, load_passwords())
passwords_text.pack()

username_label = tk.Label(root, text="用户名：")
username_label.pack()
username_entry = tk.Entry(root)
username_entry.pack()

password_label = tk.Label(root, text="密码：")
password_label.pack()
password_entry = tk.Entry(root, show="*")
password_entry.pack()

# 切换密码显示模式的按钮
toggle_visibility_button = tk.Button(root, text="切换密码显示", command=toggle_password_visibility)
toggle_visibility_button.pack()

save_button = tk.Button(root, text="保存密码", command=update_password)
save_button.pack()

delete_button = tk.Button(root, text="删除记录", command=delete_selected)
delete_button.pack()

modify_button = tk.Button(root, text="修改记录", command=modify_selected)
modify_button.pack()

help_button = tk.Button(root, text="帮助", command=show_help)
help_button.pack()

root.mainloop()

